// Generated by CoffeeScript 1.10.0
(function() {
  window.Topics = {
    topic_id: null,
    user_liked_reply_ids: []
  };

  window.TopicView = Backbone.View.extend({
    el: "body",
    currentPageImageURLs: [],
    clearHightTimer: null,
    events: {
      "click #replies .reply .btn-reply": "reply",
      "click .btn-focus-reply": "reply",
      "click #topic-upload-image": "browseUpload",
      "click .insert-codes a": "appendCodesFromHint",
      "click a.at_floor": "clickAtFloor",
      "click a.follow": "follow",
      "click a.bookmark": "bookmark",
      "click .btn-move-page": "scrollPage",
      "click .notify-updated .update": "updateReplies"
    },
    initialize: function(opts) {
      this.parentView = opts.parentView;
      this.initComponents();
      this.initCableUpdate();
      this.initDropzone();
      this.initContentImageZoom();
      this.initCloseWarning();
      this.checkRepliesLikeStatus();
      return this.resetClearReplyHightTimer();
    },
    resetClearReplyHightTimer: function() {
      clearTimeout(this.clearHightTimer);
      return this.clearHightTimer = setTimeout(function() {
        return $(".reply").removeClass("light");
      }, 10000);
    },
    initDropzone: function() {
      var dropzone, editor, editor_dropzone, self;
      self = this;
      editor = $("textarea.topic-editor");
      editor.wrap("<div class=\"topic-editor-dropzone\"></div>");
      editor_dropzone = $('.topic-editor-dropzone');
      editor_dropzone.on('paste', (function(_this) {
        return function(event) {
          return self.handlePaste(event);
        };
      })(this));
      return dropzone = editor_dropzone.dropzone({
        url: "/photos",
        dictDefaultMessage: "",
        clickable: true,
        paramName: "file",
        maxFilesize: 20,
        uploadMultiple: false,
        headers: {
          "X-CSRF-Token": $("meta[name=\"csrf-token\"]").attr("content")
        },
        previewContainer: false,
        processing: function() {
          $(".div-dropzone-alert").alert("close");
          return self.showUploading();
        },
        dragover: function() {
          editor.addClass("div-dropzone-focus");
        },
        dragleave: function() {
          editor.removeClass("div-dropzone-focus");
        },
        drop: function() {
          editor.removeClass("div-dropzone-focus");
          editor.focus();
        },
        success: function(header, res) {
          self.appendImageFromUpload([res.url]);
        },
        error: function(temp, msg) {
          App.alert(msg);
        },
        totaluploadprogress: function(num) {},
        sending: function() {},
        queuecomplete: function() {
          self.restoreUploaderStatus();
        }
      });
    },
    uploadFile: function(item, filename) {
      var formData, self;
      self = this;
      formData = new FormData();
      formData.append("file", item, filename);
      return $.ajax({
        url: '/photos',
        type: "POST",
        data: formData,
        dataType: "JSON",
        processData: false,
        contentType: false,
        beforeSend: function() {
          return self.showUploading();
        },
        success: function(e, status, res) {
          self.appendImageFromUpload([res.responseJSON.url]);
          return self.restoreUploaderStatus();
        },
        error: function(res) {
          App.alert("上传失败");
          return self.restoreUploaderStatus();
        },
        complete: function() {
          return self.restoreUploaderStatus();
        }
      });
    },
    handlePaste: function(e) {
      var image, pasteEvent, self;
      self = this;
      pasteEvent = e.originalEvent;
      if (pasteEvent.clipboardData && pasteEvent.clipboardData.items) {
        image = self.isImage(pasteEvent);
        if (image) {
          e.preventDefault();
          return self.uploadFile(image.getAsFile(), "image.png");
        }
      }
    },
    isImage: function(data) {
      var i, item;
      i = 0;
      while (i < data.clipboardData.items.length) {
        item = data.clipboardData.items[i];
        if (item.type.indexOf("image") !== -1) {
          return item;
        }
        i++;
      }
      return false;
    },
    browseUpload: function(e) {
      $(".topic-editor").focus();
      $('.topic-editor-dropzone').click();
      return false;
    },
    showUploading: function() {
      $("#topic-upload-image").hide();
      if ($("#topic-upload-image").parent().find("span.loading").length === 0) {
        return $("#topic-upload-image").before("<span class='loading'><i class='fa fa-circle-o-notch fa-spin'></i></span>");
      }
    },
    restoreUploaderStatus: function() {
      $("#topic-upload-image").parent().find("span.loading").remove();
      return $("#topic-upload-image").show();
    },
    appendImageFromUpload: function(srcs) {
      var before_text, caret_pos, j, len, source, src, src_merged, txtBox;
      txtBox = $(".topic-editor");
      caret_pos = txtBox.caret('pos');
      src_merged = "";
      for (j = 0, len = srcs.length; j < len; j++) {
        src = srcs[j];
        src_merged = "![](" + src + ")\n";
      }
      source = txtBox.val();
      before_text = source.slice(0, caret_pos);
      txtBox.val(before_text + src_merged + source.slice(caret_pos + 1, source.count));
      txtBox.caret('pos', caret_pos + src_merged.length);
      txtBox.focus();
      return false;
    },
    reply: function(e) {
      var _el, floor, login, new_text, reply_body;
      _el = $(e.target);
      floor = _el.data("floor");
      login = _el.data("login");
      reply_body = $("#new_reply textarea");
      if (floor) {
        new_text = "#" + floor + "楼 @" + login + " ";
      } else {
        new_text = '';
      }
      if (reply_body.val().trim().length === 0) {
        new_text += '';
      } else {
        new_text = "\n" + new_text;
      }
      reply_body.focus().val(reply_body.val() + new_text);
      return false;
    },
    clickAtFloor: function(e) {
      var floor;
      floor = $(e.target).data('floor');
      return this.gotoFloor(floor);
    },
    gotoFloor: function(floor) {
      var replyEl;
      replyEl = $("#reply" + floor);
      this.highlightReply(replyEl);
      return replyEl;
    },
    highlightReply: function(replyEl) {
      $("#replies .reply").removeClass("light");
      return replyEl.addClass("light");
    },
    checkRepliesLikeStatus: function() {
      var el, id, j, len, ref, results;
      ref = Topics.user_liked_reply_ids;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        id = ref[j];
        el = $("#replies a.likeable[data-id=" + id + "]");
        results.push(this.parentView.likeableAsLiked(el));
      }
      return results;
    },
    replyCallback: function(success, msg) {
      if (msg === '') {
        return;
      }
      $("#main .alert-message").remove();
      if (success) {
        $("abbr.timeago", $("#replies .reply").last()).timeago();
        $("abbr.timeago", $("#replies .total")).timeago();
        $("#new_reply textarea").val('');
        $("#preview").text('');
        App.notice(msg, '#reply');
      } else {
        App.alert(msg, '#reply');
      }
      $("#new_reply textarea").focus();
      $('#reply-button').button('reset');
      return this.resetClearReplyHightTimer();
    },
    initContentImageZoom: function() {
      var el, exceptClasses, imgEls, j, len;
      exceptClasses = ["emoji"];
      imgEls = $(".markdown img");
      for (j = 0, len = imgEls.length; j < len; j++) {
        el = imgEls[j];
        if (exceptClasses.indexOf($(el).attr("class")) === -1) {
          $(el).wrap("<a href='" + ($(el).attr("src")) + "' class='zoom-image' data-action='zoom'></a>");
        }
      }
      if (App.mobile === true) {
        $('a.zoom-image').attr("target", "_blank");
      } else {
        $('a.zoom-image').fluidbox({
          overlayColor: "#FFF",
          closeTrigger: [
            {
              selector: 'window',
              event: 'scroll'
            }
          ]
        });
      }
      return true;
    },
    preview: function(body) {
      $("#preview").text("Loading...");
      return $.post("/topics/preview", {
        "body": body
      }, function(data) {
        return $("#preview").html(data.body);
      }, "json");
    },
    hookPreview: function(switcher, textarea) {
      var preview_box, self;
      self = this;
      preview_box = $(document.createElement("div")).attr("id", "preview");
      preview_box.addClass("markdown form-control");
      $(textarea).after(preview_box);
      preview_box.hide();
      $(".edit a", switcher).click(function() {
        $(".preview", switcher).removeClass("active");
        $(this).parent().addClass("active");
        $(preview_box).hide();
        $(textarea).show();
        return false;
      });
      return $(".preview a", switcher).click(function() {
        $(".edit", switcher).removeClass("active");
        $(this).parent().addClass("active");
        $(preview_box).show();
        $(textarea).hide();
        self.preview($(textarea).val());
        return false;
      });
    },
    initCloseWarning: function() {
      var msg, text;
      text = $("textarea.closewarning");
      if (text.length === 0) {
        return false;
      }
      if (!msg) {
        msg = "离开本页面将丢失未保存页面!";
      }
      $("input[type=submit]").click(function() {
        return $(window).unbind("beforeunload");
      });
      return text.change(function() {
        if (text.val().length > 0) {
          return $(window).bind("beforeunload", function(e) {
            if ($.browser.msie) {
              return e.returnValue = msg;
            } else {
              return msg;
            }
          });
        } else {
          return $(window).unbind("beforeunload");
        }
      });
    },
    bookmark: function(e) {
      var link, target, topic_id;
      target = $(e.currentTarget);
      topic_id = target.data("id");
      link = $(".bookmark[data-id='" + topic_id + "']");
      if (link.hasClass("active")) {
        $.ajax({
          url: "/topics/" + topic_id + "/unfavorite",
          type: "DELETE"
        });
        link.attr("title", "收藏").removeClass("active");
      } else {
        $.post("/topics/" + topic_id + "/favorite");
        link.attr("title", "取消收藏").addClass("active");
      }
      return false;
    },
    follow: function(e) {
      var link, target, topic_id;
      target = $(e.currentTarget);
      topic_id = target.data("id");
      link = $(".follow[data-id='" + topic_id + "']");
      if (link.hasClass("active")) {
        $.ajax({
          url: "/topics/" + topic_id + "/unfollow",
          type: "DELETE"
        });
        link.removeClass("active");
      } else {
        $.ajax({
          url: "/topics/" + topic_id + "/follow",
          type: "POST"
        });
        link.addClass("active");
      }
      return false;
    },
    submitTextArea: function(e) {
      if ($(e.target).val().trim().length > 0) {
        $("form#new_reply").submit();
      }
      return false;
    },
    insertSpaces: function(e) {
      var $target, end, start, target;
      target = e.target;
      start = target.selectionStart;
      end = target.selectionEnd;
      $target = $(target);
      $target.val($target.val().substring(0, start) + "  " + $target.val().substring(end));
      target.selectionStart = target.selectionEnd = start + 2;
      return false;
    },
    appendCodesFromHint: function(e) {
      var before_text, caret_pos, language, link, prefix_break, source, src_merged, txtBox;
      link = $(e.currentTarget);
      language = link.data("lang");
      txtBox = $(".topic-editor");
      caret_pos = txtBox.caret('pos');
      prefix_break = "";
      if (txtBox.val().length > 0) {
        prefix_break = "\n";
      }
      src_merged = prefix_break + "```" + language + "\n\n```\n";
      source = txtBox.val();
      before_text = source.slice(0, caret_pos);
      txtBox.val(before_text + src_merged + source.slice(caret_pos + 1, source.count));
      txtBox.caret('pos', caret_pos + src_merged.length - 5);
      txtBox.focus();
      txtBox.trigger('click');
      return false;
    },
    scrollPage: function(e) {
      var moveType, opts, target;
      target = $(e.currentTarget);
      moveType = target.data('type');
      opts = {
        scrollTop: 0
      };
      if (moveType === 'bottom') {
        opts.scrollTop = $('body').height();
      }
      $("body, html").animate(opts, 300);
      return false;
    },
    initComponents: function() {
      var k, logins, matchResult, v;
      $("textarea.topic-editor").unbind("keydown.cr");
      $("textarea.topic-editor").bind("keydown.cr", "ctrl+return", (function(_this) {
        return function(el) {
          return _this.submitTextArea(el);
        };
      })(this));
      $("textarea.topic-editor").unbind("keydown.mr");
      $("textarea.topic-editor").bind("keydown.mr", "Meta+return", (function(_this) {
        return function(el) {
          return _this.submitTextArea(el);
        };
      })(this));
      $("textarea.topic-editor").unbind("keydown.tab");
      $("textarea.topic-editor").bind("keydown.tab", "tab", (function(_this) {
        return function(el) {
          return _this.insertSpaces(el);
        };
      })(this));
      $("textarea.topic-editor").autogrow();
      matchResult = window.location.hash.match(/^#reply(\d+)$/);
      if (matchResult != null) {
        this.highlightReply($("#reply" + matchResult[1]));
      }
      this.hookPreview($(".editor-toolbar"), $(".topic-editor"));
      $("body").bind("keydown", "m", function(el) {
        return $('#markdown_help_tip_modal').modal({
          keyboard: true,
          backdrop: true,
          show: true
        });
      });
      logins = App.scanLogins($("#topic-show .leader a[data-author]"));
      $.extend(logins, App.scanLogins($('#replies span.name a')));
      logins = (function() {
        var results;
        results = [];
        for (k in logins) {
          v = logins[k];
          results.push({
            login: k,
            name: v,
            search: k + " " + v
          });
        }
        return results;
      })();
      App.atReplyable("textarea", logins);
      return $("body[data-controller-name='topics'] #topic_title").focus();
    },
    initCableUpdate: function() {
      var self;
      self = this;
      if (!window.repliesChannel) {
        console.log("init repliesChannel");
        return window.repliesChannel = App.cable.subscriptions.create('RepliesChannel', {
          connected: function() {
            return setTimeout((function(_this) {
              return function() {
                _this.followCurrentTopic();
                return $(document).on('page:change', function() {
                  return window.repliesChannel.followCurrentTopic();
                });
              };
            })(this), 1000);
          },
          received: (function(_this) {
            return function(json) {
              if (json.user_id === App.current_user_id) {
                return false;
              }
              if (json.action === 'create') {
                if (App.windowInActive) {
                  return _this.updateReplies();
                } else {
                  return $(".notify-updated").show();
                }
              }
            };
          })(this),
          followCurrentTopic: function() {
            return this.perform('follow', {
              topic_id: Topics.topic_id
            });
          }
        });
      }
    },
    updateReplies: function() {
      var lastId;
      lastId = $("#replies .reply:last").data('id');
      if (!lastId) {
        Turbolinks.visit(location.href);
        return false;
      }
      $.get("/topics/" + Topics.topic_id + "/replies.js?last_id=" + lastId, (function(_this) {
        return function() {
          $(".notify-updated").hide();
          return $("#new_reply textarea").focus();
        };
      })(this));
      return false;
    }
  });

}).call(this);
